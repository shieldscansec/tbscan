import { EmbedBuilder } from 'discord.js';

const COLORS = {
    SUCCESS: 0x00ff00,
    ERROR: 0xff0000,
    WARNING: 0xffff00,
    INFO: 0x0099ff,
    PENDING: 0xffa500,
    PRIMARY: 0x5865f2
};

/**
 * Cria um embed de sucesso
 */
export function createSuccessEmbed(title, description) {
    return new EmbedBuilder()
        .setColor(COLORS.SUCCESS)
        .setTitle(`‚úÖ ${title}`)
        .setDescription(description)
        .setTimestamp();
}

/**
 * Cria um embed de erro
 */
export function createErrorEmbed(title, description) {
    return new EmbedBuilder()
        .setColor(COLORS.ERROR)
        .setTitle(`‚ùå ${title}`)
        .setDescription(description)
        .setTimestamp();
}

/**
 * Cria um embed de aviso
 */
export function createWarningEmbed(title, description) {
    return new EmbedBuilder()
        .setColor(COLORS.WARNING)
        .setTitle(`‚ö†Ô∏è ${title}`)
        .setDescription(description)
        .setTimestamp();
}

/**
 * Cria um embed informativo
 */
export function createInfoEmbed(title, description) {
    return new EmbedBuilder()
        .setColor(COLORS.INFO)
        .setTitle(`‚ÑπÔ∏è ${title}`)
        .setDescription(description)
        .setTimestamp();
}

/**
 * Cria um embed para o painel de configura√ß√£o
 */
export function createConfigPanelEmbed(guildName, config, questions) {
    const embed = new EmbedBuilder()
        .setColor(COLORS.PRIMARY)
        .setTitle('üõ†Ô∏è Painel de Configura√ß√£o - Formul√°rios Ghost')
        .setDescription(`Gerencie o sistema de formul√°rios do servidor **${guildName}**`)
        .setTimestamp();

    // Status da configura√ß√£o
    const logCategory = config?.log_category_id ? '‚úÖ Configurada' : '‚ùå N√£o configurada';
    const approvedRole = config?.approved_role_id ? '‚úÖ Configurado' : '‚ùå N√£o configurado';
    const rejectedRole = config?.rejected_role_id ? '‚úÖ Configurado' : '‚ö†Ô∏è Opcional';

    embed.addFields(
        {
            name: 'üìä Status da Configura√ß√£o',
            value: `**Categoria de Logs:** ${logCategory}\n**Cargo Aprovado:** ${approvedRole}\n**Cargo Reprovado:** ${rejectedRole}`,
            inline: false
        },
        {
            name: 'üìù Perguntas do Formul√°rio',
            value: questions.length > 0 ? `${questions.length} pergunta(s) configurada(s)` : '‚ùå Nenhuma pergunta configurada',
            inline: true
        },
        {
            name: 'üéØ A√ß√µes Dispon√≠veis',
            value: 'Use os bot√µes abaixo para configurar o sistema',
            inline: true
        }
    );

    return embed;
}

/**
 * Cria um embed para listar perguntas
 */
export function createQuestionsListEmbed(questions) {
    const embed = new EmbedBuilder()
        .setColor(COLORS.INFO)
        .setTitle('üìã Perguntas do Formul√°rio')
        .setTimestamp();

    if (questions.length === 0) {
        embed.setDescription('‚ùå Nenhuma pergunta configurada ainda.\n\nUse o bot√£o "‚ûï Adicionar Pergunta" para come√ßar!');
    } else {
        let description = '';
        questions.forEach((q, index) => {
            description += `**${index + 1}.** ${q.question}\n`;
        });
        embed.setDescription(description);
        embed.setFooter({ text: `Total: ${questions.length} pergunta(s)` });
    }

    return embed;
}

/**
 * Cria um embed para submiss√£o de formul√°rio
 */
export function createSubmissionEmbed(user, answers, submissionId) {
    const embed = new EmbedBuilder()
        .setColor(COLORS.PENDING)
        .setTitle('üì® Nova Submiss√£o de Formul√°rio')
        .setDescription(`**Usu√°rio:** ${user.tag} (${user.id})`)
        .addFields({
            name: 'üìù Respostas',
            value: answers || 'Erro ao carregar respostas',
            inline: false
        })
        .setThumbnail(user.displayAvatarURL({ dynamic: true }))
        .setFooter({ text: `ID da Submiss√£o: ${submissionId}` })
        .setTimestamp();

    return embed;
}

/**
 * Cria um embed para o bot√£o de enviar formul√°rio
 */
export function createFormStartEmbed(guildName) {
    return new EmbedBuilder()
        .setColor(COLORS.PRIMARY)
        .setTitle('üìã Formul√°rio de Inscri√ß√£o')
        .setDescription(`Bem-vindo ao sistema de formul√°rios do **${guildName}**!\n\nClique no bot√£o abaixo para iniciar o preenchimento do formul√°rio. As perguntas ser√£o enviadas diretamente na sua DM.`)
        .addFields({
            name: 'üìù Como funciona?',
            value: '1Ô∏è‚É£ Clique em "üì® Enviar Formul√°rio"\n2Ô∏è‚É£ Responda as perguntas na sua DM\n3Ô∏è‚É£ Aguarde a an√°lise dos administradores\n4Ô∏è‚É£ Receba o resultado na sua DM',
            inline: false
        })
        .setFooter({ text: 'Certifique-se de que suas DMs est√£o abertas!' })
        .setTimestamp();
}

/**
 * Cria um embed de resultado de aprova√ß√£o/reprova√ß√£o
 */
export function createResultEmbed(approved, guildName, reviewer) {
    const color = approved ? COLORS.SUCCESS : COLORS.ERROR;
    const emoji = approved ? '‚úÖ' : '‚ùå';
    const status = approved ? 'APROVADO' : 'REPROVADO';
    
    return new EmbedBuilder()
        .setColor(color)
        .setTitle(`${emoji} Formul√°rio ${status}`)
        .setDescription(`Seu formul√°rio no servidor **${guildName}** foi **${status.toLowerCase()}**!`)
        .addFields({
            name: 'üë§ Revisado por',
            value: reviewer.tag,
            inline: true
        })
        .setTimestamp();
}