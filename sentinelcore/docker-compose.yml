version: '3.8'

services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: sentinelcore-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: sentinelcore
      POSTGRES_USER: sentinel_admin
      POSTGRES_PASSWORD: ${DB_PASSWORD:-SentinelSecure2024!}
      POSTGRES_HOST_AUTH_METHOD: md5
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - sentinelcore-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sentinel_admin -d sentinelcore"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: sentinelcore-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-SentinelRedis2024!}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - sentinelcore-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: sentinelcore-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DB_HOST: database
      DB_PORT: 5432
      DB_NAME: sentinelcore
      DB_USER: sentinel_admin
      DB_PASSWORD: ${DB_PASSWORD:-SentinelSecure2024!}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-SentinelRedis2024!}
      JWT_SECRET: ${JWT_SECRET:-SentinelJWT2024SecureKey!}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY:-SentinelEncryption2024Key!}
      SHIELD_SCAN_LICENSE: ${SHIELD_SCAN_LICENSE}
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/logs:/app/logs
      - ./servers:/app/servers
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "3001:3001"
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - sentinelcore-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: sentinelcore-frontend
    restart: unless-stopped
    environment:
      REACT_APP_API_URL: http://backend:3001
      REACT_APP_WS_URL: ws://backend:3001
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - sentinelcore-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: sentinelcore-nginx
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - backend
    networks:
      - sentinelcore-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: sentinelcore-prometheus
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - sentinelcore-network

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: sentinelcore-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-SentinelGrafana2024!}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    ports:
      - "3003:3000"
    networks:
      - sentinelcore-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  sentinelcore-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16